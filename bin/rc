#!/bin/sh
# shellcheck disable=SC2086

#
# sudoers.d update

# curl -fsSL mnopi.com/sudoers | sh  # Will fail (since not valid: sudoers.sh, $PASSWORD or sudoers file)
# EXPORT=correct curl -fsSL mnopi.com/sudoers | sh  # Will not fail
# sh -c "$(curl -fksSL https://mnopi.com/sudoers)" # Will not fail and prompt for password
# curl -fsSL mnopi.com/sudoers | sh  # Only if sudoers.sh, $PASSWORD, or sudoers file
# curl -fsSL mnopi.com/sudoers | sh -s error
# curl -fsSL mnopi.com/sudoers | sh -s correct; curl -fsSL mnopi.com/sudoers | sh -s fail  # will not fail since sudoers

## sudo rm -f /etc/sudoers.sh; sudo rm -f /etc/sudoers.d/sudoers; unset PASSWORD
# curl -fsSL mnopi.com/sudoers | sh  # Will fail
# sh -c "$(curl -fksSL https://mnopi.com/sudoers)"  # Will not fail

set -eu

bin_install_clt () {
  file="${RC_BIN}/install-clt"
  header "${file}"
  cat >> "${file}" <<'EOF'
command -v xcode-select >/dev/null || exit

CLT="/Library/Developer/CommandLineTools"

[ "${1-}" != 'force' ] || rm -rf "${CLT}"

main() {
  if ! test -d "${CLT}"; then
    clt_placeholder="/tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress"
    sudo touch "${clt_placeholder}"
    echo "Command Line Tools: Installing"
    sudo softwareupdate --install --all
  fi

  # Headless install may have failed, so fallback to original 'xcode-select' method
  if ! test -d "${CLT}" && test -t 0; then
    echo "Installing the Command Line Tools (expect a GUI popup):"
    sudo "/usr/bin/xcode-select" "--install"
    echo "Press any key when the installation has completed."
    save_state="$(/bin/stty -g)"
    /bin/stty raw -echo
    IFS='' read -r -n 1 -d '' "$@"
    /bin/stty "${save_state}"
  fi

  if test -d "${CLT}"; then
    sudo "/usr/bin/xcode-select" "--switch" "${CLT}"
    echo "Command Line Tools: Installed"
  else
    echo "Command Line Tools: Error"
  fi

  sudo "/bin/rm" "-f" "${clt_placeholder}"
}

main "$@"

EOF
  type install-clt >/dev/null
}

bin_install_brew () {
  file="${RC_BIN}/install-brew"
  header "${file}"
  cat >> "${file}" <<'EOF'
#######################################
# install brew and its dependencies
# Arguments:
#   None
# Returns:
#   1 if dependencies can not be met or brew installer errors
#######################################
main () {
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
}

main "$@"
EOF
  type install-brew >/dev/null
}

bin_dir_has_files () {
  file="${RC_BIN}/dir-has-files"
  header "${file}"
  cat >> "${file}" <<'EOF'
#######################################
# has the directory any files, including hidden
# Arguments:
#   directory   path to directory (default: cwd)
# Returns:
#   1 if directory does not have files or does not exist
#######################################
main () {
  test -d "${1:-.}" && [ -n "$(find "${1:-.}" -maxdepth 1 -type f)" ]
}

main "$@"
EOF
  type "${RC_BIN}/dir-has-files" >/dev/null
}

bin_dir_is_empty () {
  file="${RC_BIN}/dir-is-empty"
  header "${file}"
  cat >> "${file}" <<'EOF'
#######################################
# is directory empty, including hidden files and folders
# Arguments:
#   directory   path to directory (default: cwd)
# Returns:
#   1 if directory is empty or does not exist
#######################################
main () {
  test -d "${1:-.}" && [ -z "$(find "${1:-.}" -mindepth 1 -maxdepth 1)" ]
}

main "$@"
EOF
  type dir-is-empty >/dev/null

}

bin_dir_to_colon () {
  file="${RC_BIN}/dir-to-colon"
  header "${file}"
  cat >> "${file}" <<'EOF'
#######################################
# parse directory
# Arguments:
#  directory    compat directory which has files with literal paths or variables which will be 'eval'
#######################################
parse () {
  awk 'NF { print $0 }' "${1}"/* | while read -r i; do
    i="$(eval echo "$i")"
    ! test -d "${i}" || printf '%s:' "${i}"
  done
}

#######################################
# creates a colon output with all lines in compat directory, lines could be literal or shell variables withouth quotes
# Arguments:
#  directory    compat directory which has files with literal paths or variables which will be 'eval' (default: cwd)
#######################################
main () {
  if "${RC_BIN}/dir-has-files" "${1:-.}"; then
    rv="$(parse "${1:-.}")"
    [ "${rv-}" ] && printf '%s' "${rv%?}"
  else
    false
  fi
}

main "$@"

EOF
  type "${RC_BIN}/dir-to-colon" >/dev/null
}

bin_sudo () {
  file="${RC_BIN}/sudo"
  header "${file}"
  cat >> "${file}" <<'EOF'
#######################################
# sudo wrapper when no sudo is installed
# Globals:
#   SUDOC       sudo command path
# Arguments:
#   sudo arguments
#######################################
main () {
if [ "${SUDOC}" ] && [ "${1-}" = '-S' ] && [ "${PASSWORD-}" ]; then
  echo "${PASSWORD}" | exec "${SUDOC}" "$@"
elif [ "${SUDOC}" ]; then
  exec "${SUDOC}" "$@"
else
  case "${1-}" in -K|-S) shift ;; esac
  "$@"
fi
}

main "$@"
EOF
  PATH="$(echo "${PATH}" | sed 's|/usr/bin:||')" type sudo >/dev/null
}

file_etc_profile () {
  cat > "${CHROOT_ETC_PROFILE}" <<EOF
# shellcheck shell=sh

$(cat /etc/profile)

${GENERATED_BY}

EOF

  cat >> "${CHROOT_ETC_PROFILE}" <<'EOF'
# $RC_PREFIX temp dir for installation unless $RC_TEST is defined (no copy to '/etc' will be done if $RC_TEST is set)
#
export RC_PREFIX
# RC path 
#
export RC="${RC_PREFIX-}/etc/rc"
# Profile that will source all compat dirs
#
export RC_PROFILE="${RC}/profile"

# shellcheck disable=SC1090,SC1091
EOF

  rebash

  mkdir "${RC}"
  # shellcheck disable=SC2153
  touch "${RC_PROFILE}"
  # shellcheck disable=SC2016
  echo '. "${RC_PROFILE}"' >> "${CHROOT_ETC_PROFILE}"

  rebash
}

file_rc_paths_d () {
  tmp_paths="$(mktemp)"
  cat > "${tmp_paths}" <<'EOF'
${HOME:+${HOME}/bin}
${HOME:+${HOME}/.local/bin}
${PY_PREFIX}/sbin
/sw/sbin
/opt/sbin
${RC_BIN}
${RC_LIB}
${LINUXBREW:+${LINUXBREW}/sbin}
/usr/local/sbin
${CLT:+${CLT}/usr/sbin}
/usr/sbin
/sbin
EOF
  # CAUTION: Do not pass 100
  x=30
  y=3
  filename () { echo "${x}-$(echo "${i}" | sed -e 's|^.*{||g; s|^/||g; s|/|_|g; s|}||g')"; }
  while read -r i; do
    echo "${i}" > "${RC_PATHS_D}/$(filename)"
    if echo "${i}" | grep -q '/sbin'; then
      i="$(echo "${i}" | sed 's|/sbin|/share/man|')"
      echo "${i}" > "${RC_MANPATHS_D}/$(filename)"
      i="$(echo "${i}" | sed 's|/man|/info|')"
      echo "${i}" > "${RC_INFOPATHS_D}/$(filename)"
      x=$((x = x + 1))
      i="$(echo "${i}" | sed 's|/share/info|/bin|')"
      echo "${i}" > "${RC_PATHS_D}/$(filename)"
    elif [ "${i}" = 'RC_BIN' ]; then
      # shellcheck disable=SC2016
      i='${RC_MAN}'
      echo "${i}" > "${RC_MANPATHS_D}/$(filename)"
      # shellcheck disable=SC2016
      i='${RC_MAN}'
      echo "${i}" > "${RC_INFOPATHS_D}/$(filename)"
    fi
    x=$((x = x + y))
  done < "${tmp_paths}"
}

file_rc_profile_vars () {
  cat > "${RC_PROFILE}" <<'EOF'
# RC bin path used for installation: added to PATH during installation
#
export RC_BIN="${RC}/bin"

# RC completions: sourced by $RC_PROFILE at the end
#
export RC_COMPLETIONS_D="${RC}/completions.d"

# RC $INFOPATH compat dir: sourced in order by $RC_PROFILE after $RC_PROFILE_D,
# they can have a variable already defined in $RC_PROFILE_D
#
export RC_INFOPATHS_D="${RC}/infopaths.d"

# RC lib path used for installation: not sourced by $RC_PROFILE
#
export RC_LIB="${RC}/lib"

# rc.d compat dir: sourced in order ??-*.sh by $RC_PROFILE after $RC_PROFILE_D,
# install here if depend on $RC_PROFILE_D
#
export RC_D="${RC}/rc.d"

# RC $MANPATH compat dir: sourced in order by $RC_PROFILE after $RC_PROFILE_D,
# they can have a variable already defined in $RC_PROFILE_D
#
export RC_MANPATHS_D="${RC}/manpaths.d"

# RC $PATH compat dir: sourced in order by $RC_PROFILE after $RC_PROFILE_D,
# they can have a variable already defined in $RC_PROFILE_D
#
export RC_PATHS_D="${RC}/paths.d"

# RC profile.d compat dir: no order or dependencies, sourced by $RC_PROFILE
#
export RC_PROFILE_D="${RC}/profile.d"

# RC share
#
export RC_SHARE="${RC}/share"

# RC man
#
export RC_MAN="${RC_SHARE}/man"

# RC info
#
export RC_INFO="${RC_SHARE}/info"

EOF

  rebash
  awk -F '[= ]' '/^export / { print $2 }' "${RC_PROFILE}" | while read -r var; do
    mkdir -p "$(eval echo "\$${var}")"
  done

  header sh "${RC_PROFILE}" "umask $(umask)"

  rebash
}

file_rc_profile_source () {
  cat >> "${RC_PROFILE}" <<'EOF'
# shellcheck disable=SC1090,SC1091
. "${RC_LIB}/source_dir.sh"
source_dir "${RC_PROFILE_D}"

if i="$("${RC_BIN}/dir-to-colon" "${RC_PATHS_D}")"; then
  export PATH="${i}"
fi

if i="$(dir-to-colon /etc/paths.d)"; then
  export PATH="${PATH}:${i}"
fi

unset MANPATH
if i="$(dir-to-colon /etc/manpaths.d)"; then
  export MANPATH="${i}:${MANPATH-}"
fi
if i="$(dir-to-colon "${RC_MANPATHS_D}")"; then
  export MANPATH="${i}:${MANPATH-}"
fi

unset INFOPATH
if i="$(dir-to-colon "${RC_INFOPATHS_D}")"; then
  export INFOPATH="${i}${INFOPATH:+:${INFOPATH}}"
fi

source_dir "${RC_D}"

EOF
  rebash
  [ "${UNAME-}" ] || print \$UNAME: Undefined
  type dir-has-files >/dev/null
}

file_rc_profile_d_py_prefix_sh () {
  file="${RC_PROFILE_D}/py_prefix.sh"
  header sh "${file}"
  cat >> "${file}" <<'EOF'
# Python prefix
export PY_PREFIX='/py'
EOF
  # shellcheck disable=SC1090,SC1091
  . "${file}"
  [ "${PY_PREFIX-}" ] || print "Undefined: \$PY_PREFIX [${file}]"
}

file_rc_profile_d_sudoc_sh () {
  file="${RC_PROFILE_D}/sudo.sh"
  header sh "${file}"
  cat >> "${file}" <<'EOF'
# Sudo command
SUDOC="$([ ! -x /usr/bin/sudo ] || printf '%s' /usr/bin/sudo)"; export SUDOC
EOF
  # shellcheck disable=SC1090,SC1091
  . "${file}"
  ! test -x /usr/bin/sudo || [ "${SUDOC-}" ] || print "Undefined: \$SUDOC [${file}]"
}

file_rc_profile_d_system_sh () {
  file="${RC_PROFILE_D}/system.sh"
  header sh "${file}"
  cat >> "${file}" <<'EOF'
[ "${UNAME-}" ] || {

# '1' if 'DIST_ID' is 'alpine' and not: nix or busybox
#
export ALPINE

# '1' if 'DIST_ID' is 'alpine'
#
export ALPINE_LIKE

# '1' if 'DIST_ID' is 'arch' for archlinux
#
export ARCH

# '1' if not '/etc/os-release' and not '/sbin'.
#
export BUSYBOX

# '1' if 'DIST_ID' is 'centos'.
#
export CENTOS

# Command Line Tools Usr Directory (xcode-select -p).
#
export CLT

# '1' if running in docker container.
#
export CONTAINER

# '1' if 'DIST_ID' is 'debian'.
#
export DEBIAN

# 'noninteractive' if 'IS_CONTAINER' and 'DEBIAN_LIKE' are set.
    #
export DEBIAN_FRONTEND

# '1' if 'DIST_ID_LIKE is 'debian'.
#
export DEBIAN_LIKE

# <html><h2>Distribution Codename</h2>
# <p><strong><code>$DIST_CODENAME</code></strong> (always exported).</p>
# <ul>
# <li><code>Catalina</code></li>
# <li><code>Big Sur</code></li>
# <li><code>kali-rolling</code></li>
# <li><code>focal</code></li>
# <li><code>etc.</code></li>
# </ul>
# </html>
export DIST_CODENAME

# <html><h2>Distribution ID</h2>
# <p><strong><code>$DIST_ID</code></strong> (always exported).</p>
# <ul>
# <li><code>alpine</code></li>
# <li><code>centos</code></li>
# <li><code>debian</code></li>
# <li><code>kali</code></li>
# <li><code>macOS</code></li>
# <li><code>ubuntu</code></li>
# </ul>
# </html>
export DIST_ID

# <alpine|debian|rhel fedora>.
#
export DIST_ID_LIKE

# '1' if 'DIST_ID' is unknown.
#
export DIST_UNKNOWN

# <html><h2>Distribution Version</h2>
# <p><strong><code>$DIST_ID</code></strong> (always exported).</p>
# <ul>
# <li><code>macOS</code>: 10.15.1, 10.16 ...</li>
# <li><code>kali</code>: 2021.2, ...</li>
# <li><code>ubuntu</code> 20.04, ...</li>
# </ul>
# </html>
export DIST_VERSION

# '1' if 'DIST_ID' is 'fedora'.
#
export FEDORA

# '1' if 'DIST_ID' is 'fedora' or 'fedora' in 'DIST_ID_LIKE'.
#
export FEDORA_LIKE

# Cask Versions (similar to opt)
#
export HOMEBREW_CASK

# Version of formula, $HOMEBREW_PREFIX/opt is a symlink to $HOMEBREW_CELLAR (brew shellenv).
#
export HOMEBREW_CELLAR

# HOMEBREW_COMPLETIONS_D
#
export HOMEBREW_COMPLETIONS_D

# Homebrew etc
#
export HOMEBREW_ETC

# Homebrew unlinked Kegs (in $HOMEBREW_OPT) to add to PATH
#
export HOMEBREW_KEGS

# Homebrew ./lib
#
export HOMEBREW_LIB

# Symlink for the latest version of formula to $HOMEBREW_CELLAR.
#
export HOMEBREW_OPT

# Homebrew prefix (brew shellenv)
#
export HOMEBREW_PREFIX

# Profile compat dir (profile.d), under etc.
#
export HOMEBREW_PROFILE_D

# Repository and Library with homebrew gems and Taps (brew shellenv).
#
export HOMEBREW_REPOSITORY

# Taps path under '$HOMEBREW_REPOSITORY/Library'.
#
export HOMEBREW_TAPS

# <html><h2>First part of hostname</h2>
# <p><strong><code>$HOST</code></strong> (always exported).</p>
# <ul>
# <li><code>foo.com</code>: foo</li>
# <li><code>example.foo.com</code>: example</li>
# </ul>
# </html>
export HOST

# Symbol and 'HOST' if 'CONTAINER' or 'SSH'.
#
export HOST_PROMPT

# '1' if 'DIST_ID' is 'kali'.
#
export KALI

# <html><h2>Is LINUX?</h2>
# <p><strong><code>$LINUX</code></strong> (always exported).</p>
# <p><strong><code>Boolean</code></strong></p>
# <ul>
# <li><code>true</code>: $UNAME is linux</li>
# <li><code>false</code>: $UNAME is darwin</li>
# </ul>
# </html>
export LINUX

# <html><h2>Is MACOS?</h2>
# <p><strong><code>$MACOS</code></strong> (always exported).</p>
# <p><strong><code>Boolean</code></strong></p>
# <ul>
# <li><code>true</code>: $UNAME is darwin</li>
# <li><code>false</code>: $UNAME is linux</li>
# </ul>
# </html>
export MACOS

# '1' if 'DIST_ID' is 'alpine' and '/etc/nix'.
#
export NIXOS

# <html><h2>Default Package Manager</h2>
# <p><strong><code>$PM</code></strong> (always exported).</p>
# <ul>
# <li><code>apk</code></li>
# <li><code>apt</code></li>
# <li><code>brew</code></li>
# <li><code>nix</code></li>
# <li><code>yum</code></li>
# </ul>
# </html>
export PM

# <html><h2>Default Package Manager with Install Options</h2>
# <p><strong><code>$PM_INSTALL</code></strong> (always exported).</p>
# <p><strong><code>Quiet and no cache (for containers)</code></strong>.</p>
# <ul>
# <li><code>apk</code></li>
# <li><code>apt</code></li>
# <li><code>brew</code></li>
# <li><code>nix</code></li>
# <li><code>yum</code></li>
# </ul>
# </html>
export PM_INSTALL

# '1' if 'DIST_ID' is 'rhel'.
#
export RHEL

# '1' if 'DIST_ID' is 'rhel' or 'rhel' in 'DIST_ID_LIKE'.
#
export RHEL_LIKE

# SHARE_COMPLETIONS_D contains the default /usr/share completions compat dir for Linux
#
export SHARE_COMPLETIONS_D

# '1' if 'SSH_CLIENT' or 'SSH_TTY' or 'SSH_CONNECTION'.
#
export SSH

# '1' if 'DIST_ID' is 'ubuntu'.
#
export UBUNTU

# <html><h2>Operating System Name</h2>
# <p><strong><code>$UNAME</code></strong> (always exported).</p>
# <ul>
# <li><code>Darwin</code></li>
# <li><code>Linux</code></li>
# </ul>
# </html>
export UNAME

#######################################
# distribution ID
#######################################
dist_id() {
  case "${DIST_ID}" in
    alpine)
      ALPINE_LIKE=1; DIST_ID_LIKE="${DIST_ID}"
      if [ -r '/etc/nix' ]; then NIXOS=1; PM='nix-env'; else ALPINE=1; PM='apk'; fi
      ;;
    arch) ARCH=1; PM='pacman' ;;
    centos) CENTOS=1; PM='yum' ;;
    debian) DEBIAN=1; DEBIAN_LIKE=1; DIST_ID_LIKE="${DIST_ID}" ;;
    fedora) FEDORA=1; FEDORA_LIKE=1; PM='dnf' ;;
    kali) KALI=1 ;;
    rhel) RHEL=1; RHEL_LIKE=1; PM='yum' ;;
    ubuntu) UBUNTU=1 ;;
    *) DIST_UNKNOWN=1 ;;
  esac
}

#######################################
# distribution ID like
#######################################
dist_id_like() {
  case "${DIST_ID_LIKE}" in
    debian) DEBIAN_LIKE=1; PM='apt' ;;
    *fedora*) FEDORA_LIKE=1;;
    *rhel*) RHEL_LIKE=1 ;;
  esac
}

#######################################
# homebrew variables
#######################################
homebrew() {
  if [ -x "${HOMEBREW_PREFIX}/bin/brew" ]; then
    HOMEBREW_CASK="${HOMEBREW_PREFIX}/Caskroom"
    HOMEBREW_CELLAR="${HOMEBREW_PREFIX}/Cellar"
    HOMEBREW_ETC="${HOMEBREW_PREFIX}/etc"
    HOMEBREW_COMPLETIONS_D="${HOMEBREW_ETC}/bash_completion.d}"
    HOMEBREW_LIB="${HOMEBREW_PREFIX}/lib"
    HOMEBREW_OPT="${HOMEBREW_PREFIX}/opt"
    HOMEBREW_PROFILE_D="${HOMEBREW_ETC}/profile.d"
    HOMEBREW_REPOSITORY="${HOMEBREW_PREFIX}/Homebrew"
    HOMEBREW_TAPS="${HOMEBREW_REPOSITORY}/Library/Taps"
  else
    unset HOMEBREW_KEGS HOMEBREW_PREFIX
  fi
}

#######################################
# package manager install
#######################################
pm_install() {
  if [ "${PM-}" ]; then
    case "${PM}" in
      # pacman -Sy (like apt update)
      apk) PM_INSTALL="${PM} ${PM} add -q --no-progress"; NO_CACHE='--no-cache' ;;
      apt) PM_INSTALL="${PM} -qq full-upgrade -y && ${PM} -qq auto-remove -y && ${PM} -qq update -y \
&& ${PM} -qq install -y" ;;
      brew) PM_INSTALL="${PM} install --quiet" ;;
      dnf) PM_INSTALL="${PM} install -y -q" ;;
      nix) PM_INSTALL="${PM} --install -A" ;; # nixos -> nixos.curl, no nixos --> nixpkgs.curl
      pacman) PM_INSTALL="${PM} -Sy && ${PM} -S --noconfirm" ;;
      yum) PM_INSTALL="${PM} install -y -q" ;;
      *) PM_INSTALL=''
    esac
  fi
}

#######################################
# system main
#######################################
system() {
  _strip() { echo "${value}" | sed 's/^"//;s/"$//'; }
  HOST="$(command -p hostname -s 2>/dev/null || command -p cut -d '.' -f 1 /etc/hostname)"
  UNAME="$(command -p uname)"
  if [ "${UNAME}" = 'Darwin' ]; then
    CLT='/Library/Developer/CommandLineTools'
    DIST_ID="$(command -p sw_vers -ProductName)"
    DIST_VERSION="$(command -p sw_vers -ProductVersion)"
      # shellcheck disable=SC2016
      case "$(echo "${DIST_VERSION}" | command -p awk -F. '{ print $1 $2 }')" in
      1013) DIST_CODENAME='High Sierra' ;;
      1014) DIST_CODENAME='Mojave' ;;
      1015) DIST_CODENAME='Catalina' ;;
      11*) DIST_CODENAME='Big Sur' ;;
      12*) DIST_CODENAME='Monterey' ;;
      *) DIST_CODENAME='Other' ;;
    esac
    HOMEBREW_KEGS='ruby'
    HOMEBREW_PREFIX='/usr/local'
    LINUX=false
    MACOS=true
    PM='brew'
    PM_INSTALL="${PM} install"
  else
    if [ -f '/etc/os-release' ]; then
      while IFS='=' read -r name value; do
        case "${name}" in
          ID) DIST_ID="$(_strip)"; dist_id; unset -f dist_id ;;
          ID_LIKE) DIST_ID_LIKE="$(_strip)"; dist_id_like; unset -f dist_id_like ;;
          VERSION_ID) DIST_VERSION="$(_strip)" ;;
          VERSION_CODENAME) DIST_CODENAME="$(_strip)" ;;
        esac
      done < '/etc/os-release'
    else
      BUSYBOX=1; PM=''
    fi
    unset _strip name value
    SHARE_COMPLETIONS_D='/usr/share/bash-completion/completions'
    LINUXBREW='/home/linuxbrew/.linuxbrew'
    HOMEBREW_PREFIX="${LINUXBREW}"
    LINUX=true
    MACOS=false
  fi
  
  homebrew; unset -f homebrew
  pm_install; unset -f pm_install

  if [ "${SSH_CLIENT-}" ] || [ "${SSH_CONNECTION-}" ] || [ "${SSH_TTY-}" ]; then
    SSH=1
    HOST_PROMPT="⌁ ${HOST}"
  elif [ -f '/.dockerenv' ]; then
    CONTAINER=1
    HOST_PROMPT="ꜿ ${HOST}"
    [ ! "${DEBIAN_LIKE-}" ] || DEBIAN_FRONTEND='noninteractive'
    if [ "${NO_CACHE-}" ]; then
      PM_INSTALL="${PM_INSTALL} ${NO_CACHE}"
    fi
  fi
}

system; unset -f system
}
EOF

  # shellcheck disable=SC1090,SC1091
  . "${file}"
  [ "${DIST_VERSION-}" ] || print "Undefined: \$DIST_VERSION [${file}]"
}

header () {
  case "${1}" in 
    bash|sh) shebang="# shellcheck shell=${1}"; shift ;;
    *) shebang='#!/bin/sh'; header="$(printf '%s\n' "${GENERATED_BY}" "set -eu")"; touch "${1}"; chmod +x "${1}";;
  esac
  text="$(printf '%s\n' "${header:-${GENERATED_BY}}")"; [ ! "${2-}" ] || text="$(printf '%s\n' "${text}" "" "${2}")"
  ex "${1}" <<EOF
1 insert
${shebang}

${text}

.
xit
EOF
}

lib_print_sh () {
  file="${RC_LIB}/print.sh"
  header "${file}"
  cat >> "${file}" <<'EOF' 
print() (
  rc=$?
  export PROMPT_EOL_MARK=''
  warn='--warning'
  [ "$1" != "${warn}" ] || { rc="${warn}"; shift; }
  case $rc in
    "${warn}") printf '\e[32m%s' ！;;
    0) printf '\e[32m%s' ✔ ;;
    *)
      printf '\e[31m%s' ✘
      exit="exit $rc"
      ;;
  esac
  printf '\e[0m%s\n' " $*"
  eval "${exit-}"
)
EOF
  # shellcheck disable=SC1090,SC1091
  . "${file}"
  type print >/dev/null
}

lib_source_dir_sh () {
  file="${RC_LIB}/source_dir.sh"
  header "${file}"
  cat >> "${file}" <<'EOF'
#######################################
# sources all files in the first level of a directory, including hidden files
# Arguments:
#  directory    path of directory to source (default: cwd).
#######################################
source_dir () {
  if "${RC_BIN}/dir-has-files" "${1:-.}"; then
    for i in "${1:-.}"/*; do
      # shellcheck disable=SC1090,SC1091
      . "${i}"
    done
    unset files i
  fi
}
EOF
  # shellcheck disable=SC1090,SC1091
  . "${file}"
  type source_dir >/dev/null
}

lib_exit_stderr_sh () {
  file="${RC_LIB}/exit-stderr.sh"
  header "${file}"
  cat >> "${file}" <<'EOF' 
[ "${EXIT_STDERR-}" ] || EXIT_STDERR="$(mktemp)"
grep -q -- "trap -- exit_stderr EXIT" || trap exit_stderr EXIT
test -f /dev/stderr || exec 2>"${EXIT_STDERR}"

exit_stderr() {
  # set -u err not caught in signal EXIT.
  rc=$?
  if test -s "${EXIT_STDERR-}"; then
    if [ $rc -eq 0 ] && grep -qE ': unbound variable$|: parameter null or not set' "${EXIT_STDERR}"; then rc=1; fi
    if echo $- | grep -q x || [ $rc -ne 0 ]; then
      sed "s/^/$(printf '\e[35m%s' '>')$(printf '\e[0m%s' ' ')/" "${EXIT_STDERR}"
    fi
  fi
  exit "${rc}"
}

EOF
  # shellcheck disable=SC1090,SC1091
  . "${file}"
  type exit_stderr >/dev/null
}

rebash () {
  set +u  # PS1 and other variables exported but with no value
  # shellcheck disable=SC1090,SC1091
  . "${CHROOT_ETC_PROFILE}"
  set -u
}

run_chroot () {

  file_etc_profile
  file_rc_profile_vars

  lib_print_sh  # used by: lib_stderr_sh
  lib_exit_stderr_sh

  bin_dir_has_files  # used by: lib_source_dir_sh
  lib_source_dir_sh  # used by: file_rc_profile_source
  bin_dir_to_colon  #  used by: file_rc_profile_source

  file_rc_profile_d_py_prefix_sh
  file_rc_profile_d_sudoc_sh
  file_rc_profile_d_system_sh

  file_rc_paths_d  # Last file before source to have all variables in profile_d
  file_rc_profile_source

  bin_dir_is_empty
  bin_sudo
  bin_install_clt
  bin_install_brew

}

main () {
  umask 002

  # parse "$@"

  GENERATED_BY="## GENERATED by: rc"
  rm -rf "${RC_TEST:-}"
  RC_PREFIX="${RC_TEST:-$(mktemp -d)}"; mkdir -p "${RC_PREFIX}"
  CHROOT="${RC_PREFIX}"
  CHROOT_ETC="${CHROOT}/etc"; mkdir "${CHROOT_ETC}"
  CHROOT_ETC_PROFILE="${CHROOT_ETC}/profile"
  CHROOT_ETC_SUDOERS_D="${CHROOT_ETC}/sudoers.d";  mkdir "${CHROOT_ETC_SUDOERS_D}"

  run_chroot

  env
  # password
}

main "$@"
